#!/bin/bash

# Script de Deploy com Cache Busting Completo
# Executa no servidor de produ√ß√£o para garantir que usu√°rios recebam a vers√£o mais recente

set -e

echo "üöÄ Iniciando deploy com cache busting..."

# Auto-detectar diret√≥rio do projeto
CURRENT_DIR=$(pwd)
if [[ "$CURRENT_DIR" == *"moz-solidaria"* ]]; then
    PROJECT_DIR="$CURRENT_DIR"
else
    # Fallback para estrutura padr√£o
    PROJECT_DIR="/var/www/mozsolidaria/frontend"
    if [ ! -d "$PROJECT_DIR" ]; then
        PROJECT_DIR="/home/ubuntu/moz-solidaria"
    fi
fi

FRONTEND_DIR="$PROJECT_DIR"
BACKEND_DIR="$PROJECT_DIR/backend"
NGINX_CONFIG="/etc/nginx/sites-available/mozsolidaria"

echo "üìÅ Diret√≥rio do projeto: $PROJECT_DIR"

# Backup da vers√£o atual
BACKUP_DIR="/var/backups/mozsolidaria/$(date +%Y%m%d_%H%M%S)"
echo "üì¶ Criando backup em $BACKUP_DIR..."
sudo mkdir -p "$BACKUP_DIR"
sudo cp -r "$FRONTEND_DIR/dist" "$BACKUP_DIR/dist_backup" 2>/dev/null || echo "Nenhum dist anterior encontrado"

# Navegar para o diret√≥rio do projeto
cd "$FRONTEND_DIR"

# Verificar se estamos em um reposit√≥rio git
if [ ! -d ".git" ]; then
    echo "‚ö†Ô∏è  N√£o √© um reposit√≥rio git, pulando atualiza√ß√£o de c√≥digo"
else
    # Garantir que temos a vers√£o mais recente do c√≥digo
    echo "üì• Atualizando c√≥digo..."
    git fetch origin
    git reset --hard origin/main
fi

# Instalar/atualizar depend√™ncias se necess√°rio
if [ -f "package-lock.json" ]; then
    echo "üì¶ Verificando depend√™ncias..."
    npm ci --silent
fi

# Build com cache busting
echo "üî® Executando build com cache busting..."
npm run build:production

# Verificar se o build foi bem-sucedido
if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
    echo "‚ùå Erro: Build falhou ou arquivos n√£o foram gerados"
    exit 1
fi

# Atualizar nginx.conf se necess√°rio
echo "üîß Verificando configura√ß√£o do Nginx..."
if [ -f "nginx.conf" ]; then
    # Verificar se nginx config existe
    if [ -f "$NGINX_CONFIG" ]; then
        if ! sudo diff -q "nginx.conf" "$NGINX_CONFIG" > /dev/null 2>&1; then
            echo "üìù Atualizando configura√ß√£o do Nginx..."
            sudo cp "nginx.conf" "$NGINX_CONFIG"
            sudo nginx -t && sudo systemctl reload nginx
        else
            echo "‚úÖ Configura√ß√£o do Nginx j√° est√° atualizada"
        fi
    else
        echo "üìù Criando configura√ß√£o do Nginx..."
        sudo cp "nginx.conf" "$NGINX_CONFIG"
        sudo ln -sf "$NGINX_CONFIG" "/etc/nginx/sites-enabled/" 2>/dev/null || true
        sudo nginx -t && sudo systemctl reload nginx
    fi
else
    echo "‚ö†Ô∏è  Arquivo nginx.conf n√£o encontrado, pulando configura√ß√£o"
fi

# Limpar cache do Nginx (se configurado)
if sudo nginx -V 2>&1 | grep -q "http_proxy_module"; then
    echo "üßπ Limpando cache do Nginx..."
    sudo find /var/cache/nginx -type f -delete 2>/dev/null || echo "Cache do Nginx n√£o encontrado"
fi

# Restart do backend se necess√°rio
cd "$BACKEND_DIR"
echo "üîÑ Verificando backend..."

# Verificar se gunicorn est√° rodando
if ! pgrep -f "gunicorn.*moz_solidaria_api" > /dev/null; then
    echo "üöÄ Iniciando Gunicorn..."
    nohup gunicorn moz_solidaria_api.wsgi:application --bind 127.0.0.1:8000 --workers 3 > ../logs/gunicorn.log 2>&1 &
    sleep 3
fi

# Teste de sa√∫de da API
echo "üè• Testando sa√∫de da API..."
if curl -f -s "http://127.0.0.1:8000/api/v1/health/" > /dev/null; then
    echo "‚úÖ API est√° respondendo"
else
    echo "‚ö†Ô∏è  API n√£o est√° respondendo - verificar logs"
fi

# For√ßar atualiza√ß√£o de cache em navegadores (header de resposta)
cd "$FRONTEND_DIR"
echo "üíæ Configurando headers anti-cache..."

# Adicionar timestamp ao index.html como coment√°rio para for√ßar atualiza√ß√£o
if [ -f "dist/index.html" ]; then
    TIMESTAMP=$(date +%s)
    sed -i "1i<!-- Build: $TIMESTAMP -->" "dist/index.html"
fi

# Verificar se build-info.json foi gerado
if [ -f "dist/build-info.json" ]; then
    BUILD_ID=$(grep -o '"buildId":"[^"]*"' "dist/build-info.json" | cut -d'"' -f4)
    echo "‚úÖ Deploy conclu√≠do! Build ID: $BUILD_ID"
else
    echo "‚ö†Ô∏è  Arquivo build-info.json n√£o encontrado"
fi

# Limpar cache do Redis (se usado para cache da aplica√ß√£o)
if command -v redis-cli &> /dev/null; then
    echo "üóëÔ∏è  Limpando cache do Redis..."
    redis-cli FLUSHDB > /dev/null 2>&1 || echo "Redis n√£o est√° configurado"
fi

echo ""
echo "üéâ Deploy com cache busting conclu√≠do com sucesso!"
echo ""
echo "üìã Pr√≥ximos passos para usu√°rios:"
echo "   1. Usu√°rios podem receber notifica√ß√£o autom√°tica de atualiza√ß√£o"
echo "   2. Para for√ßar atualiza√ß√£o manual: Ctrl+F5 ou Cmd+Shift+R"
echo "   3. Limpar dados do navegador se necess√°rio"
echo ""
echo "üîç Verificar deployment:"
echo "   - Frontend: https://mozsolidaria.org"
echo "   - API Health: https://mozsolidaria.org/api/v1/health/"
echo "   - Build Info: https://mozsolidaria.org/build-info.json"
echo ""

# Opcional: Notificar webhook/Slack sobre deploy
# if [ -n "$SLACK_WEBHOOK_URL" ]; then
#     curl -X POST -H 'Content-type: application/json' \
#         --data "{\"text\":\"üöÄ Deploy realizado com sucesso! Build ID: $BUILD_ID\"}" \
#         "$SLACK_WEBHOOK_URL"
# fi
