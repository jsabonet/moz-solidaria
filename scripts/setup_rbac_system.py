#!/usr/bin/env python
# scripts/setup_rbac_system.py
"""
Script para configurar completamente o sistema RBAC da Moz Solid√°ria Hub
"""

import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'backend'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'moz_solidaria_api.settings')
django.setup()

from django.contrib.auth.models import User, Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.core.management import call_command
from core.models import UserProfile
from core.permissions import SYSTEM_PERMISSIONS, GROUPS_PERMISSIONS

def create_content_types():
    """Cria content types customizados para permiss√µes"""
    
    # Content types para os m√≥dulos do sistema
    content_types = [
        ('system', 'Sistema'),
        ('users', 'Usu√°rios'),
        ('blog', 'Blog'),
        ('projects', 'Projetos'),
        ('community', 'Comunidade'),
        ('reports', 'Relat√≥rios'),
    ]
    
    created_content_types = {}
    
    for app_label, model in content_types:
        content_type, created = ContentType.objects.get_or_create(
            app_label='core',
            model=model.lower()
        )
        created_content_types[app_label] = content_type
        
        if created:
            print(f"‚úì Content type criado: {model}")
        else:
            print(f"- Content type j√° existe: {model}")
    
    return created_content_types

def create_custom_permissions(content_types):
    """Cria permiss√µes customizadas do sistema"""
    
    created_permissions = {}
    
    for module, permissions_list in SYSTEM_PERMISSIONS.items():
        print(f"\nProcessando m√≥dulo: {module}")
        
        # Verifica se o content type existe
        if module not in content_types:
            print(f"‚ö† Content type n√£o encontrado para {module}")
            continue
        
        content_type = content_types[module]
        
        # Processa cada permiss√£o do m√≥dulo
        for perm_code, description in permissions_list:
            # Cria o codename removendo pontos (Django n√£o permite)
            codename = perm_code.replace('.', '_')
            
            # Cria a permiss√£o
            permission, created = Permission.objects.get_or_create(
                codename=codename,
                content_type=content_type,
                defaults={'name': description}
            )
            
            created_permissions[perm_code] = permission
            
            if created:
                print(f"‚úì Permiss√£o criada: {description}")
            else:
                print(f"- Permiss√£o j√° existe: {description}")
    
    return created_permissions

def create_groups_and_assign_permissions(permissions):
    """Cria grupos e atribui permiss√µes"""
    
    created_groups = {}
    
    for group_name, permissions_list in GROUPS_PERMISSIONS.items():
        # Cria o grupo
        group, created = Group.objects.get_or_create(name=group_name)
        created_groups[group_name] = group
        
        if created:
            print(f"‚úì Grupo criado: {group_name}")
        else:
            print(f"- Grupo j√° existe: {group_name}")
        
        # Limpa permiss√µes existentes
        group.permissions.clear()
        
        # Adiciona permiss√µes ao grupo
        assigned_permissions = 0
        for perm_code in permissions_list:
            if perm_code in permissions:
                group.permissions.add(permissions[perm_code])
                assigned_permissions += 1
            else:
                print(f"‚ö† Permiss√£o n√£o encontrada: {perm_code}")
        
        print(f"  ‚Üí {assigned_permissions} permiss√µes atribu√≠das ao grupo {group_name}")
    
    return created_groups

def create_super_admin_user():
    """Cria usu√°rio super admin se n√£o existir"""
    
    username = 'admin'
    email = 'admin@mozsolidaria.org'
    password = 'MozSolidaria2024!'
    
    if User.objects.filter(username=username).exists():
        print(f"- Super admin j√° existe: {username}")
        user = User.objects.get(username=username)
    else:
        user = User.objects.create_superuser(
            username=username,
            email=email,
            password=password,
            first_name='Super',
            last_name='Administrador'
        )
        print(f"‚úì Super admin criado: {username}")
        print(f"  Email: {email}")
        print(f"  Password: {password}")
    
    # Cria perfil se n√£o existir
    profile, created = UserProfile.objects.get_or_create(
        user=user,
        defaults={
            'department': 'TI',
            'position': 'Administrador do Sistema',
            'location': 'Maputo',
            'is_active_admin': True
        }
    )
    
    if created:
        print(f"‚úì Perfil criado para {username}")
    
    # Adiciona ao grupo Super Admin
    try:
        super_admin_group = Group.objects.get(name='Super Admin')
        user.groups.add(super_admin_group)
        print(f"‚úì {username} adicionado ao grupo Super Admin")
    except Group.DoesNotExist:
        print("‚ö† Grupo Super Admin n√£o encontrado")
    
    return user

def run_migrations():
    """Executa migra√ß√µes necess√°rias"""
    print("\n=== EXECUTANDO MIGRA√á√ïES ===")
    
    try:
        # Cria migra√ß√µes para os novos modelos
        print("Criando migra√ß√µes...")
        call_command('makemigrations', 'core', verbosity=1)
        
        # Aplica migra√ß√µes
        print("Aplicando migra√ß√µes...")
        call_command('migrate', verbosity=1)
        
        print("‚úì Migra√ß√µes executadas com sucesso")
        
    except Exception as e:
        print(f"‚ö† Erro nas migra√ß√µes: {str(e)}")
        return False
    
    return True

def setup_rbac_system():
    """Fun√ß√£o principal para configurar o sistema RBAC"""
    
    print("=== CONFIGURA√á√ÉO DO SISTEMA RBAC MOZ SOLID√ÅRIA HUB ===\n")
    
    # 1. Executar migra√ß√µes
    if not run_migrations():
        print("‚ùå Falha nas migra√ß√µes. Abortando setup.")
        return False
    
    print("\n=== CRIANDO CONTENT TYPES ===")
    content_types = create_content_types()
    
    print("\n=== CRIANDO PERMISS√ïES CUSTOMIZADAS ===")
    permissions = create_custom_permissions(content_types)
    
    print("\n=== CRIANDO GRUPOS E ATRIBUINDO PERMISS√ïES ===")
    groups = create_groups_and_assign_permissions(permissions)
    
    print("\n=== CRIANDO SUPER ADMIN ===")
    admin_user = create_super_admin_user()
    
    print("\n=== RESUMO DA CONFIGURA√á√ÉO ===")
    print(f"‚úì {len(content_types)} content types configurados")
    print(f"‚úì {len(permissions)} permiss√µes criadas")
    print(f"‚úì {len(groups)} grupos configurados")
    print(f"‚úì 1 super admin criado")
    
    print("\n=== GRUPOS E PERMISS√ïES CRIADOS ===")
    for group_name, group in groups.items():
        perm_count = group.permissions.count()
        print(f"‚Ä¢ {group_name}: {perm_count} permiss√µes")
    
    print("\n=== PR√ìXIMOS PASSOS ===")
    print("1. Adicione os middlewares ao settings.py:")
    print("   - 'backend.core.middleware.AuditMiddleware'")
    print("   - 'backend.core.middleware.SecurityMiddleware'")
    print("   - 'backend.core.middleware.PermissionLoggingMiddleware'")
    print("\n2. Inclua as URLs de permiss√µes no urls.py principal")
    print("\n3. Configure o frontend para usar as permiss√µes")
    print("\n4. Teste o sistema de login com o super admin criado")
    
    return True

if __name__ == '__main__':
    try:
        success = setup_rbac_system()
        if success:
            print("\nüéâ SISTEMA RBAC CONFIGURADO COM SUCESSO!")
        else:
            print("\n‚ùå FALHA NA CONFIGURA√á√ÉO DO SISTEMA RBAC")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
