#!/usr/bin/env python
# test_donor_stats_fixed.py - Teste de estat√≠sticas do donor dashboard

import requests
import json
import sys

# Configura√ß√µes
API_BASE = 'http://localhost:8000/api/v1'

def login_as_user():
    """Fazer login como usu√°rio doador"""
    # Tentar diferentes credenciais
    credentials = [
        {'username': 'donor', 'password': 'donor123'},
        {'username': 'user', 'password': 'user123'},
        {'username': 'testuser', 'password': 'testpass'},
        {'username': 'doador', 'password': 'doador123'},
    ]
    
    for creds in credentials:
        response = requests.post(f'{API_BASE}/auth/token/', json=creds)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Login realizado com {creds['username']}")
            return data.get('access'), creds['username']
        else:
            print(f"‚ùå Falha no login com {creds['username']}: {response.status_code}")
    
    return None, None

def test_donor_stats(token):
    """Testar estat√≠sticas do doador"""
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    print(f"\n=== Testando Estat√≠sticas do Doador ===")
    
    response = requests.get(f'{API_BASE}/donor/stats/', headers=headers)
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        stats = response.json()
        print(f"‚úÖ Estat√≠sticas obtidas com sucesso!")
        print(f"üìä Dados: {json.dumps(stats, indent=2)}")
        return True
    else:
        print(f"‚ùå Erro ao obter estat√≠sticas: {response.text}")
        return False

def test_general_stats(token):
    """Testar estat√≠sticas gerais"""
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    print(f"\n=== Testando Estat√≠sticas Gerais ===")
    
    response = requests.get(f'{API_BASE}/stats/', headers=headers)
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        stats = response.json()
        print(f"‚úÖ Estat√≠sticas gerais obtidas!")
        print(f"üìä Dados: {json.dumps(stats, indent=2)}")
        return True
    else:
        print(f"‚ùå Erro ao obter estat√≠sticas gerais: {response.text}")
        
        # Tentar endpoint alternativo
        response2 = requests.get(f'{API_BASE}/donations/stats/', headers=headers)
        print(f"Tentativa alternativa - Status: {response2.status_code}")
        if response2.status_code == 200:
            stats2 = response2.json()
            print(f"‚úÖ Estat√≠sticas alternativas obtidas!")
            print(f"üìä Dados: {json.dumps(stats2, indent=2)}")
            return True
        return False

def test_donations_list(token):
    """Testar listagem de doa√ß√µes do usu√°rio"""
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    print(f"\n=== Testando Listagem de Doa√ß√µes ===")
    
    response = requests.get(f'{API_BASE}/donations/my/', headers=headers)
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        donations = response.json()
        print(f"‚úÖ Doa√ß√µes do usu√°rio obtidas!")
        print(f"üìä Total de doa√ß√µes: {len(donations) if isinstance(donations, list) else donations.get('count', 0)}")
        return True
    else:
        print(f"‚ùå Erro ao obter doa√ß√µes: {response.text}")
        
        # Tentar endpoint geral
        response2 = requests.get(f'{API_BASE}/donations/', headers=headers)
        print(f"Tentativa geral - Status: {response2.status_code}")
        if response2.status_code == 200:
            donations2 = response2.json()
            print(f"‚úÖ Doa√ß√µes gerais obtidas!")
            results = donations2 if isinstance(donations2, list) else donations2.get('results', [])
            print(f"üìä Total de doa√ß√µes: {len(results)}")
            return True
        return False

def main():
    print("üîç Testando Sistema de Estat√≠sticas do Doador...")
    
    # Login
    token, username = login_as_user()
    if not token:
        print("‚ùå Falha no login com todos os usu√°rios testados")
        print("‚ÑπÔ∏è Tentando usar admin...")
        
        admin_response = requests.post(f'{API_BASE}/auth/token/', json={'username': 'admin', 'password': 'admin123'})
        if admin_response.status_code == 200:
            token = admin_response.json().get('access')
            username = 'admin'
            print("‚úÖ Login admin realizado")
        else:
            print("‚ùå Falha no login admin tamb√©m")
            sys.exit(1)
    
    print(f"üîë Logado como: {username}")
    
    # Executar testes
    success_count = 0
    total_tests = 3
    
    if test_donor_stats(token):
        success_count += 1
    
    if test_general_stats(token):
        success_count += 1
    
    if test_donations_list(token):
        success_count += 1
    
    print(f"\nüìã Resultado Final: {success_count}/{total_tests} testes bem-sucedidos")
    
    if success_count == total_tests:
        print("üéâ Todos os testes passaram!")
    elif success_count > 0:
        print("‚ö†Ô∏è Alguns testes falharam, mas funcionalidade b√°sica est√° funcionando")
    else:
        print("‚ùå Todos os testes falharam")

if __name__ == '__main__':
    main()
