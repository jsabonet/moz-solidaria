#!/bin/bash

# üöÄ DEPLOY SEO COMPLETO PARA PRODU√á√ÉO
# Script para implementar todas as configura√ß√µes SEO no servidor

echo "üöÄ INICIANDO DEPLOY SEO PARA PRODU√á√ÉO..."
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se est√° no diret√≥rio correto
if [[ ! -f "manage.py" ]]; then
    log_error "Execute este script no diret√≥rio raiz do projeto (onde est√° o manage.py)"
    exit 1
fi

# ETAPA 1: BACKEND - Configura√ß√µes Django
log_step "1. Configurando Backend Django..."

# 1.1 Verificar se sitemaps.py foi criado
if [[ ! -f "backend/core/sitemaps.py" ]]; then
    log_error "Arquivo backend/core/sitemaps.py n√£o encontrado!"
    exit 1
fi

# 1.2 Aplicar migra√ß√µes (se necess√°rio)
log_step "1.1 Aplicando migra√ß√µes Django..."
cd backend
python manage.py makemigrations
python manage.py migrate
log_success "Migra√ß√µes aplicadas"

# 1.3 Coletar arquivos est√°ticos
log_step "1.2 Coletando arquivos est√°ticos..."
python manage.py collectstatic --noinput
log_success "Arquivos est√°ticos coletados"

# 1.4 Testar URLs dos sitemaps
log_step "1.3 Testando configura√ß√µes de sitemap..."
python manage.py shell << EOF
from django.urls import reverse
from django.test import Client
from django.conf import settings

client = Client()
print("Testando URLs de sitemap:")

# Testar sitemap index
try:
    response = client.get('/sitemap-index.xml')
    print(f"Sitemap Index: Status {response.status_code}")
    if response.status_code == 200:
        print("‚úÖ Sitemap Index OK")
    else:
        print("‚ùå Erro no Sitemap Index")
except Exception as e:
    print(f"‚ùå Erro: {e}")

# Testar sitemaps espec√≠ficos
sitemaps = ['static', 'blog', 'programas']
for sitemap in sitemaps:
    try:
        response = client.get(f'/sitemap-{sitemap}.xml')
        print(f"Sitemap {sitemap}: Status {response.status_code}")
        if response.status_code == 200:
            print(f"‚úÖ Sitemap {sitemap} OK")
        else:
            print(f"‚ùå Erro no Sitemap {sitemap}")
    except Exception as e:
        print(f"‚ùå Erro {sitemap}: {e}")
EOF

cd ..
log_success "Configura√ß√µes Django testadas"

# ETAPA 2: FRONTEND - Build e Deploy
log_step "2. Preparando Frontend..."

# 2.1 Instalar depend√™ncias
log_step "2.1 Instalando depend√™ncias npm..."
npm install
log_success "Depend√™ncias instaladas"

# 2.2 Build do frontend
log_step "2.2 Fazendo build do frontend..."
npm run build
log_success "Build do frontend conclu√≠do"

# ETAPA 3: NGINX - Configura√ß√µes de servidor
log_step "3. Configurando Nginx..."

# 3.1 Criar configura√ß√£o SEO para Nginx
cat > nginx_seo.conf << 'EOL'
# Configura√ß√µes SEO para Nginx

# Gzip compression para melhor performance
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/javascript
    application/xml+rss
    application/json
    image/svg+xml;

# Headers de seguran√ßa e SEO
add_header X-Content-Type-Options nosniff;
add_header X-Frame-Options DENY;
add_header X-XSS-Protection "1; mode=block";
add_header Referrer-Policy "strict-origin-when-cross-origin";

# Cache para arquivos est√°ticos
location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Vary Accept-Encoding;
}

# Robots.txt
location = /robots.txt {
    alias /var/www/mozsolidaria/public/robots.txt;
    add_header Content-Type text/plain;
}

# Sitemaps XML
location ~ ^/sitemap.*\.xml$ {
    proxy_pass http://localhost:8000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    add_header Content-Type application/xml;
}

# Redirecionamento HTTPS
if ($scheme != "https") {
    return 301 https://$host$request_uri;
}
EOL

log_success "Configura√ß√£o Nginx criada: nginx_seo.conf"

# ETAPA 4: Verifica√ß√µes de SEO
log_step "4. Executando verifica√ß√µes SEO..."

# 4.1 Verificar robots.txt
log_step "4.1 Verificando robots.txt..."
if [[ -f "public/robots.txt" ]]; then
    echo "Conte√∫do do robots.txt:"
    head -10 public/robots.txt
    log_success "robots.txt encontrado"
else
    log_error "robots.txt n√£o encontrado em public/"
fi

# 4.2 Verificar estrutura de sitemaps
log_step "4.2 Verificando estrutura de sitemaps..."
if [[ -f "backend/core/templates/sitemap_index.xml" ]] && [[ -f "backend/core/templates/sitemap.xml" ]]; then
    log_success "Templates de sitemap encontrados"
else
    log_error "Templates de sitemap n√£o encontrados"
fi

# 4.3 Verificar configura√ß√£o SEO
log_step "4.3 Verificando configura√ß√£o SEO..."
if [[ -f "src/config/seo.ts" ]]; then
    log_success "Configura√ß√£o SEO encontrada"
else
    log_error "Arquivo src/config/seo.ts n√£o encontrado"
fi

# ETAPA 5: Testes de Performance
log_step "5. Executando testes b√°sicos..."

# 5.1 Verificar tamanho do build
BUILD_SIZE=$(du -sh dist/ 2>/dev/null | cut -f1 || echo "N/A")
log_step "5.1 Tamanho do build: $BUILD_SIZE"

# 5.2 Verificar se h√° arquivos grandes
log_step "5.2 Verificando arquivos grandes no build..."
find dist/ -size +1M -type f 2>/dev/null | head -5 || echo "Nenhum arquivo grande encontrado"

# ETAPA 6: Comandos para o servidor de produ√ß√£o
log_step "6. Comandos para servidor de produ√ß√£o..."

cat << 'EOL'

üìã COMANDOS PARA EXECUTAR NO SERVIDOR DE PRODU√á√ÉO:
=================================================

1Ô∏è‚É£ FAZER PULL DO C√ìDIGO ATUALIZADO:
   cd /var/www/mozsolidaria
   git pull origin main

2Ô∏è‚É£ ATUALIZAR BACKEND:
   cd backend
   source venv/bin/activate  # ou conda activate mozsolidaria
   pip install -r requirements.txt
   python manage.py migrate
   python manage.py collectstatic --noinput

3Ô∏è‚É£ ATUALIZAR FRONTEND:
   cd /var/www/mozsolidaria
   npm install
   npm run build

4Ô∏è‚É£ REINICIAR SERVI√áOS:
   sudo systemctl restart mozsolidaria
   sudo systemctl restart nginx

5Ô∏è‚É£ VERIFICAR SITEMAPS (ap√≥s reiniciar):
   curl -I https://mozsolidaria.org/sitemap-index.xml
   curl -I https://mozsolidaria.org/sitemap-static.xml
   curl -I https://mozsolidaria.org/robots.txt

6Ô∏è‚É£ APLICAR CONFIGURA√á√ÉO NGINX SEO:
   sudo cp nginx_seo.conf /etc/nginx/sites-available/mozsolidaria-seo
   sudo nginx -t
   sudo systemctl reload nginx

EOL

# ETAPA 7: Checklist p√≥s-deploy
cat << 'EOL'

‚úÖ CHECKLIST P√ìS-DEPLOY:
========================

üîç VERIFICA√á√ïES IMEDIATAS:
‚ñ° Site carregando normalmente: https://mozsolidaria.org
‚ñ° Robots.txt acess√≠vel: https://mozsolidaria.org/robots.txt
‚ñ° Sitemap index: https://mozsolidaria.org/sitemap-index.xml
‚ñ° Sitemap est√°tico: https://mozsolidaria.org/sitemap-static.xml
‚ñ° Sitemap blog: https://mozsolidaria.org/sitemap-blog.xml
‚ñ° Sitemap programas: https://mozsolidaria.org/sitemap-programas.xml

üìä META TAGS (verificar no navegador):
‚ñ° P√°gina inicial tem meta description
‚ñ° P√°ginas t√™m titles √∫nicos
‚ñ° Open Graph tags presentes
‚ñ° Meta robots configurado

üöÄ PR√ìXIMOS PASSOS:
‚ñ° Configurar Google Search Console
‚ñ° Submeter sitemaps ao Google
‚ñ° Configurar Bing Webmaster Tools
‚ñ° Instalar Google Analytics 4
‚ñ° Configurar monitoramento de performance

üì± TESTES RECOMENDADOS:
‚ñ° Teste mobile responsiveness
‚ñ° Lighthouse audit
‚ñ° PageSpeed Insights
‚ñ° Verifica√ß√£o de Core Web Vitals

EOL

log_success "Deploy SEO preparado! Execute os comandos acima no servidor."
echo "=================================================="
echo "üéâ SCRIPT CONCLU√çDO COM SUCESSO!"
echo "üìñ Consulte GUIA_SEO_COMPLETO.md para instru√ß√µes detalhadas"
