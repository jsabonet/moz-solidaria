#!/usr/bin/env python3
"""
Teste para verificar se o novo signal est√° funcionando
"""
import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'moz_solidaria_api.settings')
django.setup()

from project_tracking.models import ProjectMetrics, ProjectUpdate
from core.models import Project
from django.contrib.auth.models import User
from datetime import datetime

def test_automatic_metrics_update():
    """Testar se as m√©tricas s√£o atualizadas automaticamente"""
    print("=== TESTE: SIGNAL DE ATUALIZA√á√ÉO AUTOM√ÅTICA ===")
    
    try:
        project = Project.objects.get(slug='Joel')
        metrics = project.metrics
        
        print(f"\nüìä Estado atual das m√©tricas:")
        print(f"   Pessoas impactadas: {metrics.people_impacted}")
        print(f"   Or√ßamento usado: {metrics.budget_used}")
        print(f"   Progresso: {metrics.progress_percentage}%")
        
        # Obter ou criar usu√°rio para o autor
        author, created = User.objects.get_or_create(
            username='test_user',
            defaults={'email': 'test@example.com'}
        )
        
        # Criar nova atualiza√ß√£o
        print(f"\nüìù Criando nova atualiza√ß√£o...")
        new_update = ProjectUpdate.objects.create(
            project=project,
            title=f"Teste Signal {datetime.now().strftime('%H:%M:%S')}",
            description="Teste para verificar se o signal atualiza as m√©tricas automaticamente",
            type='progress',
            status='published',
            people_impacted=200,
            budget_spent='15000.00',
            progress_percentage=98,
            author=author
        )
        
        print(f"‚úÖ Atualiza√ß√£o criada: {new_update.title}")
        print(f"   ID: {new_update.id}")
        print(f"   Pessoas impactadas: {new_update.people_impacted}")
        print(f"   Or√ßamento gasto: {new_update.budget_spent}")
        print(f"   Progresso: {new_update.progress_percentage}%")
        
        # Recarregar m√©tricas do banco de dados
        metrics.refresh_from_db()
        
        print(f"\nüìä Estado das m√©tricas ap√≥s criar atualiza√ß√£o:")
        print(f"   Pessoas impactadas: {metrics.people_impacted}")
        print(f"   Or√ßamento usado: {metrics.budget_used}")
        print(f"   Progresso: {metrics.progress_percentage}%")
        print(f"   √öltima atualiza√ß√£o: {metrics.last_updated}")
        
        # Verificar se h√° atualiza√ß√µes
        total_updates = project.tracking_updates.filter(status='published').count()
        print(f"\nüìà Total de updates publicados: {total_updates}")
        
        print(f"\n‚úÖ Teste conclu√≠do!")
        
    except Project.DoesNotExist:
        print("‚ùå Projeto 'Joel' n√£o encontrado!")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_automatic_metrics_update()
