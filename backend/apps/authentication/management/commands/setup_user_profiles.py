# apps/authentication/management/commands/setup_user_profiles.py
from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.apps import apps

class Command(BaseCommand):
    help = 'Configura os perfis de usu√°rio e suas permiss√µes'

    def handle(self, *args, **options):
        self.stdout.write('Configurando perfis de usu√°rio...')
        
        # Definir perfis e suas permiss√µes
        profiles = {
            'super_admin': {
                'name': 'Super Admin',
                'description': 'Acesso total ao sistema, incluindo gest√£o de usu√°rios e configura√ß√µes',
                'permissions': [
                    # Autentica√ß√£o - gest√£o completa de usu√°rios
                    'auth.add_user',
                    'auth.change_user', 
                    'auth.delete_user',
                    'auth.view_user',
                    'auth.add_group',
                    'auth.change_group',
                    'auth.delete_group',
                    'auth.view_group',
                    'auth.add_permission',
                    'auth.change_permission',
                    'auth.delete_permission',
                    'auth.view_permission',
                    
                    # Configura√ß√µes do sistema
                    'admin.add_logentry',
                    'admin.change_logentry',
                    'admin.delete_logentry',
                    'admin.view_logentry',
                    
                    # Sess√µes
                    'sessions.add_session',
                    'sessions.change_session',
                    'sessions.delete_session',
                    'sessions.view_session',
                    
                    # Content types
                    'contenttypes.add_contenttype',
                    'contenttypes.change_contenttype',
                    'contenttypes.delete_contenttype',
                    'contenttypes.view_contenttype',
                ]
            },
            
            'blog_manager': {
                'name': 'Gestor de Blog',
                'description': 'Acesso apenas ao m√≥dulo de Blog (criar, editar, publicar, excluir artigos e categorias)',
                'permissions': [
                    # Visualiza√ß√£o b√°sica de usu√°rios para autoria
                    'auth.view_user',
                    
                    # Adicionar permiss√µes espec√≠ficas quando os models forem criados
                    # 'blog.add_post',
                    # 'blog.change_post',
                    # 'blog.delete_post',
                    # 'blog.view_post',
                ]
            },
            
            'project_manager': {
                'name': 'Gestor de Projetos',
                'description': 'Acesso apenas ao m√≥dulo de Projetos (criar, editar, encerrar e gerar relat√≥rios)',
                'permissions': [
                    # Visualiza√ß√£o b√°sica de usu√°rios para atribui√ß√£o
                    'auth.view_user',
                    
                    # Adicionar permiss√µes espec√≠ficas quando os models forem criados
                    # 'projects.add_project',
                    # 'projects.change_project',
                    # 'projects.delete_project',
                    # 'projects.view_project',
                ]
            },
            
            'community_manager': {
                'name': 'Gestor de Comunidade',
                'description': 'Acesso apenas ao m√≥dulo de Comunidade (aprovar/rejeitar volunt√°rios, parcerias, benefici√°rios e doadores)',
                'permissions': [
                    # Visualiza√ß√£o b√°sica de usu√°rios
                    'auth.view_user',
                    
                    # Adicionar permiss√µes espec√≠ficas quando os models forem criados
                    # 'community.add_volunteer',
                    # 'community.change_volunteer',
                    # 'community.view_volunteer',
                ]
            },
            
            'viewer': {
                'name': 'Visualizador',
                'description': 'Acesso de leitura a todos os m√≥dulos, sem possibilidade de altera√ß√£o',
                'permissions': [
                    # Apenas visualiza√ß√£o em todos os m√≥dulos
                    'auth.view_user',
                    'auth.view_group',
                    'contenttypes.view_contenttype',
                ]
            }
        }
        
        # Criar grupos e atribuir permiss√µes
        for profile_code, profile_data in profiles.items():
            group, created = Group.objects.get_or_create(name=profile_data['name'])
            
            if created:
                self.stdout.write(f'Criado grupo: {profile_data["name"]}')
            else:
                self.stdout.write(f'Grupo j√° existe: {profile_data["name"]}')
                # Limpar permiss√µes existentes
                group.permissions.clear()
            
            # Adicionar permiss√µes
            permissions_added = 0
            for perm_code in profile_data['permissions']:
                try:
                    app_label, codename = perm_code.split('.')
                    permission = Permission.objects.get(
                        content_type__app_label=app_label,
                        codename=codename
                    )
                    group.permissions.add(permission)
                    permissions_added += 1
                except Permission.DoesNotExist:
                    self.stdout.write(
                        self.style.WARNING(f'Permiss√£o n√£o encontrada: {perm_code}')
                    )
                except ValueError:
                    self.stdout.write(
                        self.style.ERROR(f'Formato de permiss√£o inv√°lido: {perm_code}')
                    )
            
            self.stdout.write(
                self.style.SUCCESS(
                    f'Configurado {profile_data["name"]}: {permissions_added} permiss√µes'
                )
            )
        
        self.stdout.write(self.style.SUCCESS('Configura√ß√£o de perfis conclu√≠da!'))
        
        # Mostrar resumo
        self.stdout.write('\nüìã RESUMO DOS PERFIS:')
        for group in Group.objects.all():
            perm_count = group.permissions.count()
            self.stdout.write(f'  ‚Ä¢ {group.name}: {perm_count} permiss√µes')
