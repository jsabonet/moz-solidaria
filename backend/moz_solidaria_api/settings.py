"""
Django settings for moz_solidaria_api project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import dj_database_url
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-+zi#_#5j8w0tq4k1m9hpq9h+=%%h-u5mn%8@uu%ngqk3ra4p)^')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# DigitalOcean and production hosts
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver').split(',')

# Add your DigitalOcean droplet IP and domain when ready
if not DEBUG:
    ALLOWED_HOSTS.extend([
        '10.106.0.2',  # Replace with actual DigitalOcean droplet IP
        'mozsolidaria.org',  # Replace with your domain
        'www.mozsolidaria.org',
    ])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'rest_framework_simplejwt',
    'django_extensions',
    'channels',
    
    # Local apps
    'core',
    'apps.authentication',
    'blog',
    'client_area',
    'donations',
    'notifications',
    'project_tracking',
    'reports',
    'partnerships',
    'volunteers',
    'beneficiaries',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # RBAC Middlewares - Sistema de Permissões e Auditoria
    'core.middleware.SecurityMiddleware',
    'core.middleware.AuditMiddleware',
    'core.middleware.PermissionLoggingMiddleware',
    
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'moz_solidaria_api.urls'

# Channels configuration
ASGI_APPLICATION = 'moz_solidaria_api.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)],
        },
    },
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'moz_solidaria_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DigitalOcean PostgreSQL Database Configuration
DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL', 
                      default='postgresql://adamoabdala:Jeison2@@localhost:5432/moz_solidaria_db')
    )
}

# Alternative direct configuration for DigitalOcean
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('DB_NAME', default='moz_solidaria_db'),
#         'USER': config('DB_USER', default='adamoabdala'),
#         'PASSWORD': config('DB_PASSWORD', default='Jeison2@@'),
#         'HOST': config('DB_HOST', default='localhost'),
#         'PORT': config('DB_PORT', default='5432'),
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'Africa/Maputo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': config('JWT_SECRET_KEY', default=SECRET_KEY),
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://localhost:8000,http://127.0.0.1:8000,http://localhost:8081,http://127.0.0.1:8081').split(',')

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development


# ========== CONFIGURAÇÕES DO SISTEMA RBAC ==========

# Configurações de segurança e sessão
SESSION_COOKIE_AGE = 8 * 60 * 60  # 8 horas
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# Configurações de cookies seguros (desabilitado em desenvolvimento)
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Strict'

# Configurações customizadas do RBAC
RBAC_SETTINGS = {
    'MAX_LOGIN_ATTEMPTS': 5,
    'LOCKOUT_TIME_MINUTES': 30,
    'SESSION_TIMEOUT_HOURS': 8,
    'ENABLE_AUDIT_LOGGING': True,
    'ENABLE_SECURITY_LOGGING': True,
    'SENSITIVE_FIELDS': [
        'password', 'token', 'secret', 'key', 'api_key',
        'access_token', 'refresh_token', 'auth_token'
    ],
    'AUDIT_MODULES': [
        'blog', 'projects', 'community', 'admin', 'reports', 'users'
    ],
    'AUDIT_ACTIONS': [
        'CREATE', 'UPDATE', 'DELETE', 'VIEW', 'APPROVE', 'REJECT',
        'LOGIN', 'LOGOUT', 'EXPORT', 'IMPORT'
    ],
}

# Configuração de logging para RBAC
import os

# Ensure logs directory exists
LOGS_DIR = BASE_DIR.parent / 'logs'
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'audit_formatter': {
            'format': '[{levelname}] {asctime} | {name} | {message}',
            'style': '{',
        },
        'security_formatter': {
            'format': '[SECURITY] {asctime} | {name} | {message}',
            'style': '{',
        },
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

# Add file handlers only if we can write to the logs directory
try:
    # Test if we can write to the logs directory
    test_file = LOGS_DIR / 'test.log'
    with open(test_file, 'w') as f:
        f.write('test')
    os.remove(test_file)
    
    # If successful, add file handlers
    LOGGING['handlers'].update({
        'audit_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'audit.log',
            'formatter': 'audit_formatter',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'security.log',
            'formatter': 'security_formatter',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'django.log',
            'formatter': 'verbose',
        },
    })
    
    # Update loggers to use file handlers
    LOGGING['loggers'].update({
        'core.middleware': {
            'handlers': ['audit_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
    })
    
except (OSError, PermissionError):
    # If we can't write to files, fall back to console logging only
    print("Warning: Unable to create log files, using console logging only")
    pass

# Additional CORS headers
# Allow default headers plus cache-control explicitly (needed for some browsers / SW fetches)
CORS_ALLOW_HEADERS = list(default_headers) + [
    'cache-control',
]

# DigitalOcean Production Security Settings
if not DEBUG:
    # Security Headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # HTTPS Settings (enable when SSL is configured)
    # SECURE_SSL_REDIRECT = True
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True
    
    # Static files served by Nginx in production
    STATIC_ROOT = config('STATIC_ROOT', default='/var/www/mozsolidaria/staticfiles/')
    MEDIA_ROOT = config('MEDIA_ROOT', default='/var/www/mozsolidaria/media/')
    
    # Production logging paths
    production_log_dir = '/var/log/mozsolidaria/'
    try:
        os.makedirs(production_log_dir, exist_ok=True)
        # Test write access
        test_file = os.path.join(production_log_dir, 'test.log')
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        
        # Update logging paths for production
        if 'file' in LOGGING['handlers']:
            LOGGING['handlers']['file']['filename'] = os.path.join(production_log_dir, 'django.log')
        if 'audit_file' in LOGGING['handlers']:
            LOGGING['handlers']['audit_file']['filename'] = os.path.join(production_log_dir, 'audit.log')
        if 'security_file' in LOGGING['handlers']:
            LOGGING['handlers']['security_file']['filename'] = os.path.join(production_log_dir, 'security.log')
            
    except (OSError, PermissionError):
        # Fallback to local logs directory in production if can't write to /var/log
        fallback_log_dir = BASE_DIR.parent / 'logs'
        os.makedirs(fallback_log_dir, exist_ok=True)
        
        if 'file' in LOGGING['handlers']:
            LOGGING['handlers']['file']['filename'] = fallback_log_dir / 'django.log'
        if 'audit_file' in LOGGING['handlers']:
            LOGGING['handlers']['audit_file']['filename'] = fallback_log_dir / 'audit.log'
        if 'security_file' in LOGGING['handlers']:
            LOGGING['handlers']['security_file']['filename'] = fallback_log_dir / 'security.log'
