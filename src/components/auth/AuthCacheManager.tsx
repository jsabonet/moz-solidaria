import { useEffect } from 'react';
import { useAuth } from '@/hooks/use-auth';

/**
 * üîÑ COMPONENTE DE LIMPEZA AUTOM√ÅTICA DE CACHE
 * 
 * Este componente detecta reloads da p√°gina e for√ßa a limpeza de cache
 * para garantir que as permiss√µes sejam sempre atualizadas.
 */
export const AuthCacheManager = () => {
  const { forceRefreshUserPermissions, isAuthenticated, user } = useAuth();

  useEffect(() => {
    // Verificar se √© um reload da p√°gina
    const checkPageReload = () => {
      const pageLoadKey = 'page_load_cache_check';
      const lastCheck = sessionStorage.getItem(pageLoadKey);
      const now = Date.now();
      
      // Se n√£o h√° registro ou passou mais de 10 segundos, √© um novo carregamento
      const isNewPageLoad = !lastCheck || (now - parseInt(lastCheck)) > 10000;
      
      if (isNewPageLoad && isAuthenticated && user) {
        console.log('üîÑ NOVO CARREGAMENTO DE P√ÅGINA DETECTADO - Verificando se cache precisa ser limpo...');
        sessionStorage.setItem(pageLoadKey, now.toString());
        
        // Verificar se h√° mudan√ßas pendentes nas permiss√µes
        const lastPermissionCheck = localStorage.getItem('last_permission_check');
        const needsRefresh = !lastPermissionCheck || (now - parseInt(lastPermissionCheck)) > 30000; // 30 segundos
        
        if (needsRefresh) {
          console.log('üßπ Executando limpeza preventiva de cache...');
          
          // Executar limpeza de cache de forma silenciosa
          forceRefreshUserPermissions()
            .then(() => {
              console.log('‚úÖ Cache limpo automaticamente ap√≥s carregamento da p√°gina');
              localStorage.setItem('last_permission_check', now.toString());
            })
            .catch((error) => {
              console.warn('‚ö†Ô∏è Erro na limpeza autom√°tica de cache:', error);
            });
        }
      }
    };

    // Executar verifica√ß√£o imediatamente
    if (isAuthenticated) {
      checkPageReload();
    }

    // Tamb√©m executar quando o foco volta para a janela
    const handleFocus = () => {
      if (isAuthenticated && user) {
        const lastFocusCheck = sessionStorage.getItem('last_focus_check');
        const now = Date.now();
        
        // Se passou mais de 5 minutos sem foco, verificar permiss√µes
        if (!lastFocusCheck || (now - parseInt(lastFocusCheck)) > 300000) {
          console.log('üîç Foco retornou ap√≥s longo per√≠odo - Verificando permiss√µes...');
          sessionStorage.setItem('last_focus_check', now.toString());
          
          forceRefreshUserPermissions()
            .then(() => {
              console.log('‚úÖ Permiss√µes atualizadas ap√≥s retorno do foco');
            })
            .catch((error) => {
              console.warn('‚ö†Ô∏è Erro na atualiza√ß√£o de foco:', error);
            });
        }
      }
    };

    window.addEventListener('focus', handleFocus);
    
    return () => {
      window.removeEventListener('focus', handleFocus);
    };
  }, [isAuthenticated, user, forceRefreshUserPermissions]);

  // Este componente n√£o renderiza nada, apenas gerencia o cache
  return null;
};

export default AuthCacheManager;
