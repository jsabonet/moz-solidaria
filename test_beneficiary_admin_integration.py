#!/usr/bin/env python
"""
Test script to verify beneficiary admin integration
"""
import os
import sys
import django

# Add backend to Python path
backend_path = os.path.join(os.path.dirname(__file__), 'backend')
sys.path.insert(0, backend_path)

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'moz_solidaria_api.settings')
django.setup()

from django.urls import reverse
from django.test import RequestFactory
from django.contrib.auth.models import User
from beneficiaries.models import BeneficiaryProfile, SupportRequest
from beneficiaries.views import admin_beneficiaries_stats, AdminBeneficiaryViewSet, AdminSupportRequestViewSet

def test_url_configuration():
    """Test that all admin URLs are properly configured"""
    print("Testing URL configuration...")
    
    try:
        # Test statistics URL
        stats_url = reverse('beneficiaries:admin_beneficiaries_stats')
        print(f"✓ Statistics URL: {stats_url}")
        
        # Test admin ViewSet URLs - these will be generated by DRF router
        print("✓ Admin ViewSet URLs should be auto-generated by DRF router")
        print("  - Beneficiaries: /api/v1/beneficiaries/admin/beneficiaries/")
        print("  - Support Requests: /api/v1/beneficiaries/admin/support-requests/")
        print("  - Communications: /api/v1/beneficiaries/admin/communications/")
        
    except Exception as e:
        print(f"✗ URL configuration error: {e}")
        return False
    
    return True

def test_admin_permissions():
    """Test admin permissions are properly configured"""
    print("\nTesting admin permissions...")
    
    try:
        # Create test users
        admin_user = User.objects.create_user(
            username='test_admin', 
            email='admin@test.com', 
            password='testpass123',
            is_staff=True
        )
        
        regular_user = User.objects.create_user(
            username='test_user', 
            email='user@test.com', 
            password='testpass123'
        )
        
        print(f"✓ Created test users: admin={admin_user.is_staff}, regular={regular_user.is_staff}")
        
        # Clean up
        admin_user.delete()
        regular_user.delete()
        
    except Exception as e:
        print(f"✗ Permission test error: {e}")
        return False
    
    return True

def test_model_integration():
    """Test that models are properly configured"""
    print("\nTesting model integration...")
    
    try:
        # Check model counts
        beneficiary_count = BeneficiaryProfile.objects.count()
        request_count = SupportRequest.objects.count()
        
        print(f"✓ BeneficiaryProfile count: {beneficiary_count}")
        print(f"✓ SupportRequest count: {request_count}")
        
        # Test model relationships
        print("✓ Models are accessible and properly configured")
        
    except Exception as e:
        print(f"✗ Model integration error: {e}")
        return False
    
    return True

def test_admin_views():
    """Test that admin views are properly configured"""
    print("\nTesting admin views...")
    
    try:
        # Test ViewSet classes exist and have proper methods
        beneficiary_viewset = AdminBeneficiaryViewSet()
        request_viewset = AdminSupportRequestViewSet()
        
        # Check for required methods
        assert hasattr(beneficiary_viewset, 'verify'), "Missing verify action"
        assert hasattr(request_viewset, 'approve'), "Missing approve action"
        assert hasattr(request_viewset, 'reject'), "Missing reject action"
        
        print("✓ Admin ViewSets are properly configured")
        print("✓ Required actions (verify, approve, reject) are available")
        
    except Exception as e:
        print(f"✗ Admin views error: {e}")
        return False
    
    return True

def main():
    """Run all integration tests"""
    print("🚀 Testing Beneficiary Admin Integration")
    print("=" * 50)
    
    tests = [
        test_url_configuration,
        test_admin_permissions,
        test_model_integration,
        test_admin_views
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"📊 Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("🎉 All tests passed! Admin integration is ready.")
        print("\n📋 Next Steps:")
        print("1. Start the Django development server")
        print("2. Test the admin dashboard in the frontend")
        print("3. Verify authentication and permissions")
        print("4. Test beneficiary verification and request approval workflows")
    else:
        print("❌ Some tests failed. Please review the errors above.")
    
    return passed == total

if __name__ == '__main__':
    main()
