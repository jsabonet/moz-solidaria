#!/usr/bin/env python3
"""
Script para testar se as otimiza√ß√µes do CreateProject realmente funcionaram
"""

import subprocess
import time
import requests
import sys

def check_server_status():
    """Verifica se o servidor local est√° rodando"""
    try:
        response = requests.get('http://localhost:8080', timeout=5)
        return response.status_code == 200
    except:
        return False

def check_production_server():
    """Verifica se o servidor de produ√ß√£o est√° rodando"""
    try:
        response = requests.get('http://209.97.128.71', timeout=10)
        return response.status_code == 200
    except:
        return False

def test_server_accessibility():
    """Testa se os servidores est√£o acess√≠veis"""
    print("üåê Testando acessibilidade dos servidores...")
    
    local_ok = check_server_status()
    prod_ok = check_production_server()
    
    if local_ok:
        print("‚úÖ Servidor local (http://localhost:8080) acess√≠vel!")
    else:
        print("‚ùå Servidor local n√£o est√° rodando")
    
    if prod_ok:
        print("‚úÖ Servidor de produ√ß√£o (http://209.97.128.71) acess√≠vel!")
    else:
        print("‚ùå Servidor de produ√ß√£o n√£o est√° acess√≠vel")
    
    return local_ok or prod_ok

def test_git_changes():
    """Verifica se as mudan√ßas foram commitadas corretamente"""
    print("üîç Verificando mudan√ßas no Git...")
    
    try:
        # Verificar se h√° commits recentes com as otimiza√ß√µes
        result = subprocess.run(['git', 'log', '--oneline', '-5'], 
                              capture_output=True, text=True, cwd='.')
        
        if 'handlers memoizados' in result.stdout.lower() or 'react.memo' in result.stdout.lower():
            print("‚úÖ Commits de otimiza√ß√£o encontrados no hist√≥rico!")
            return True
        else:
            print("‚ö†Ô∏è Commits de otimiza√ß√£o n√£o encontrados nos √∫ltimos 5 commits")
            print("√öltimos commits:")
            print(result.stdout)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar Git: {e}")
        return False

def test_file_modifications():
    """Verifica se o arquivo CreateProject.tsx foi modificado corretamente"""
    print("üìÅ Verificando modifica√ß√µes no arquivo...")
    
    try:
        with open('src/pages/CreateProject.tsx', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se as otimiza√ß√µes est√£o presentes
        checks = [
            ('useCallback', 'useCallback import'),
            ('useMemo', 'useMemo import'),
            ('memo', 'React.memo import'),
            ('handleNameChange', 'Handler memoizado para nome'),
            ('handleShortDescriptionChange', 'Handler memoizado para descri√ß√£o curta'),
            ('MemoizedInput', 'Componente Input memoizado'),
            ('MemoizedTextarea', 'Componente Textarea memoizado'),
            ('setTimeout', 'Debounce na gera√ß√£o de slug'),
        ]
        
        passed_checks = 0
        for check, description in checks:
            if check in content:
                print(f"‚úÖ {description} encontrado")
                passed_checks += 1
            else:
                print(f"‚ùå {description} N√ÉO encontrado")
        
        success_rate = (passed_checks / len(checks)) * 100
        print(f"üìä Taxa de sucesso: {success_rate:.1f}% ({passed_checks}/{len(checks)})")
        
        return success_rate >= 80
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar arquivo: {e}")
        return False

def main():
    print("üöÄ TESTE DE OTIMIZA√á√ïES DO CREATEPROJECT")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 0
    
    # Teste 1: Verificar modifica√ß√µes no arquivo
    total_tests += 1
    if test_file_modifications():
        tests_passed += 1
        print()
    
    # Teste 2: Verificar commits
    total_tests += 1
    if test_git_changes():
        tests_passed += 1
        print()
    
    # Teste 3: Verificar acessibilidade dos servidores
    total_tests += 1
    if test_server_accessibility():
        tests_passed += 1
        print()
    
    print("\n" + "=" * 50)
    print(f"üìä RESULTADO FINAL: {tests_passed}/{total_tests} testes passaram")
    
    if tests_passed == total_tests:
        print("üéâ TODOS OS TESTES PASSARAM! As otimiza√ß√µes foram aplicadas corretamente.")
        return True
    elif tests_passed > total_tests * 0.5:
        print("‚ö†Ô∏è A maioria dos testes passou, mas algumas otimiza√ß√µes podem estar faltando.")
        return False
    else:
        print("‚ùå Muitos testes falharam. As otimiza√ß√µes podem n√£o ter sido aplicadas corretamente.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
